/**************************** Basic parameters ****************************/

params {
    root_dir = "/Volumes"
    main_dir = "${params.root_dir}/scratch/DIMA/chiodin/repositories/image_registration_pipeline"
}

// Process-specific configuration
process {
    executor = "pbspro"
    queue = "workq"
    maxForks = 4 // Maximum parallel jobs for the 'local' executor
}


/**************************** Profiles ****************************/
profiles {
    debug { process.beforeScript = "echo $HOSTNAME" }

    docker {
        docker.enabled         = true
        docker.userEmulation   = { params.use_gatk_spark ? false : true }.call()
        charliecloud.enabled   = false
        podman.enabled         = false
        shifter.enabled        = false
        singularity.enabled    = false
        //process.container = "docker://yinxiu/variantalker:v1.0"
        
    }

    singularity {
        singularity.autoMounts = true
        singularity.enabled    = true
        singularity.runOptions = " --bind /hpcnfs/ --bind /hpcscratch "
        charliecloud.enabled   = false
        docker.enabled         = false
        podman.enabled         = false
        shifter.enabled        = false
        //process.container = "docker://yinxiu/variantalker:v1.0"
    }

    image_conversion {
        params {
            process_dir = "image_conversion"
            input_dir = "${params.main_dir}/${params.process_dir}/data/input"
            output_dir = "${params.main_dir}/${params.process_dir}/data/output"
            logs_dir = "${params.main_dir}/${params.process_dir}/logs"
            sample_sheet_path = "${params.logs_dir}/io/sample_sheet.csv"
            sample_sheet_current_path = "${params.logs_dir}/io/sample_sheet_current.csv"
        }

        process {
            update_io {
                input_dir = params.input_dir
                output_dir = params.output_dir
                logs_dir = params.logs_dir
                backup_dir = "${params.logs_dir}/io/backups"
                input_ext = ".nd2"
                output_ext = ".ome.tiff"
            }

            export_samples_to_process {
                sample_sheet_path = params.sample_sheet_path
                output_path = params.sample_sheet_current_path
            }

            convert_images {
                sample_sheet_current_path = params.sample_sheet_current_path
                tilex = 512 
                tiley = 512 
                pyramid_resolutions = 3 
                pyramid_scale = 2
            }
        }
    }

    image_registration {
        params {
            process_dir = "image_registration"
            input_dir = "${params.main_dir}/${params.process_dir}/data/input"
            output_dir = "${params.main_dir}/${params.process_dir}/data/output"
            logs_dir = "${params.main_dir}/${params.process_dir}/logs"
            sample_sheet_path = "${params.logs_dir}/io/sample_sheet.csv"
            sample_sheet_current_path = "${params.logs_dir}/io/sample_sheet_current.csv"
        }

        process {
            update_io {
                input_dir = params.input_dir
                output_dir = params.output_dir
                logs_dir = params.logs_dir
                backup_dir = "${params.logs_dir}/io/backups"
                input_ext = ".ome.tiff"
                output_ext = ".ome.tiff"
            }

            export_samples_to_process {
                sample_sheet_path = params.sample_sheet_path
                output_path = params.sample_sheet_current_path
            }

            register_images {
                sample_sheet_path = params.sample_sheet_current_path
                mappings_dir = "${params.output_dir}/mappings"
                registered_crops_dir = "${params.output_dir}/registered_crops_dir"
                crop_width_x = 500 
                crop_width_y = 500 
                overlap_x = 250 
                overlap_y = 250 
                overlap_factor = 0.3 
                auto_overlap = false
                delete_checkpoints = false
            }
        }
    }
}


/**************************** Manifest ****************************************************/

manifest {
    name            = "nd2converter"
    author          = """Alessio Chiodin, Yinxiu Zhan"""
    homePage        = "https://github.com/dimadatascience/nd2conversion"
    description     = """Pipeline to convert nd2files."""
    mainScript      = "main.nf"
    nextflowVersion = "!>=22.10.1"
    version         = "1.0.0"
}

/**************************** Tower ****************************************************/
tower {
    enabled = false
}




// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == "memory") {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == "time") {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == "cpus") {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
